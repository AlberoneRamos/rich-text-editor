{"version":3,"sources":["SlateEditor/commands.js","SlateEditor/plugins.js","SlateEditor/renderMark.jsx","SlateEditor/Toolbar.jsx","SlateEditor/Image/Image.jsx","SlateEditor/renderBlock.jsx","SlateEditor/schema.js","SlateEditor/TextEditor.jsx","App.js","serviceWorker.js","index.js"],"names":["commands","wrapLink","change","url","wrapInline","type","data","unwrapLink","unwrapInline","plugins","When","when","value","blocks","every","b","plugin","SoftBreak","some","shift","PasteLinkify","collapseTo","Keymap","event","editor","toggleMark","AutoReplace","trigger","before","setBlocks","wrapBlock","matches","level","length","renderMark","next","mark","attributes","children","Toolbar","handleMarkClick","handleBlockClick","classList","handleImageSubmit","marks","useState","displayUrlInput","setDisplayUrlInput","setUrl","className","classNames","map","blockChildren","key","onClick","e","active","block","onChange","target","disabled","markChildren","Image","node","readOnly","src","get","align","left","center","right","alt","setNodeByKey","renderBlock","props","href","Heading","schema","document","nodes","match","min","paragraph","object","link","heading","list","list_item","parent","code_block","quote","image","isVoid","horizontal_rule","MARK_TYPES","BLOCK_TYPES","queries","isLinkActive","inlines","i","TextEditor","Value","fromJSON","initialValue","setValue","editorRef","useRef","preventDefault","current","focus","isTypeActive","insertBlock","autoFocus","ref","placeholder","App","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uUAAaA,EAAW,CACtBC,SADsB,SACbC,EAAQC,GACfD,EAAOE,WAAW,CAAEC,KAAM,OAAQC,KAAM,CAAEH,UAE5CI,WAJsB,SAIXL,GACTA,EAAOM,aAAa,U,gDCCXC,EAAU,CACrBC,YAAK,CACHC,KAAM,SAAAC,GAAK,OAAIA,EAAMC,OAAOC,OAAM,SAAAC,GAAC,MAAe,eAAXA,EAAEV,SACzCW,OAAQC,gBAEVP,YAAK,CACHC,KAAM,SAAAC,GAAK,OAAKA,EAAMC,OAAOK,MAAK,SAAAH,GAAC,MAAe,SAAXA,EAAEV,SACzCW,OAAQC,YAAU,CAAEE,OAAO,MAE7BC,YAAa,CACXf,KAAM,OACNgB,WAAY,QAEdC,YAAO,CACL,QAAS,SAACC,EAAOC,GAAR,OAAmBA,EAAOC,WAAW,SAC9C,QAAS,SAACF,EAAOC,GAAR,OAAmBA,EAAOC,WAAW,WAC9C,QAAS,SAACF,EAAOC,GAAR,OAAmBA,EAAOC,WAAW,cAC9C,QAAS,SAACF,EAAOC,GAAR,OAAmBA,EAAOC,WAAW,WAEhDC,YAAY,CACVC,QAAS,QACTC,OAAQ,QACR1B,OAAQ,SAAAA,GAAM,OAAIA,EAAO2B,UAAU,YAErCH,YAAY,CACVC,QAAS,QACTC,OAAQ,QACR1B,OAAQ,SAAAA,GAAM,OAAIA,EAAO2B,UAAU,MAAMC,UAAU,SAErDJ,YAAY,CACVC,QAAS,QACTC,OAAQ,aACR1B,OAAQ,SAACA,EAAQqB,EAAOQ,GAAa,IAE7BC,EAF4B,YACjBD,EAAQH,OADS,MAEbK,OACrB/B,EAAO2B,UAAU,CAAExB,KAAM,UAAWC,KAAM,CAAE0B,eCvCrCE,EAAa,SAAC,EAAgCC,GAAU,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,WAAYC,EAAqB,EAArBA,SAC7C,OAAQF,EAAK/B,MACX,IAAK,OACH,OAAO,2BAAYgC,EAAaC,GAClC,IAAK,SACH,OAAO,sBAAOD,EAAaC,GAC7B,IAAK,YACH,OAAO,sBAAOD,EAAaC,GAC7B,QACE,OAAOH,M,iBCoEEI,G,OAtDC,SAAC,GASJ,IARXC,EAQU,EARVA,gBACAC,EAOU,EAPVA,iBAEAC,GAKU,EANVJ,SAMU,EALVI,WACAC,EAIU,EAJVA,kBACA9B,EAGU,EAHVA,OACA+B,EAEU,EAFVA,MACAhC,EACU,EADVA,MACU,EACoCiC,oBAAS,GAD7C,mBACHC,EADG,KACcC,EADd,OAEYF,mBAAS,IAFrB,mBAEH1C,EAFG,KAEE6C,EAFF,KAIV,OACE,yBAAKC,UAAWC,IAAWR,EAAW,YACrC7B,EAAOsC,KAAI,gBAAG9C,EAAH,EAAGA,KAAgB+C,EAAnB,EAASd,SAAT,OACV,4BACAe,IAAKhD,EACLiD,QAAS,SAAAC,GAAC,OAAId,EAAiBc,EAAGlD,IAClC4C,UAAWC,IAAW,sBAAuB,CAC3CM,OAAQ5C,EAAMC,OAAOK,MAAK,SAAAuC,GAAK,MAAoB,UAAfA,EAAMpD,MAAoBoD,EAAMpD,OAASA,QAE5E+C,MAGL,yBAAKH,UAAU,gBACb,4BACEA,UAAWC,IAAW,sBAAuB,CAC3CM,OAAQV,IAEVQ,QAAS,kBAAMP,GAAoBD,KACjC,kBAAC,IAAD,OAEHA,GACD,yBAAKG,UAAU,uBACb,2BAAO5C,KAAK,OAAOO,MAAOT,EAAKuD,SAAU,SAAAH,GAAC,OAAIP,EAAOO,EAAEI,OAAO/C,UAC9D,4BAAQgD,SAAyB,IAAfzD,EAAI8B,OAAcqB,QAAS,SAACC,GAAD,OAAOZ,EAAkBY,EAAGpD,KAAzE,SAIHyC,EAAMO,KAAI,gBAAG9C,EAAH,EAAGA,KAAgBwD,EAAnB,EAASvB,SAAT,OACT,4BACAe,IAAKhD,EACLiD,QAAS,SAAAC,GAAC,OAAIf,EAAgBe,EAAGlD,IACjC4C,UAAWC,IAAW,sBAAuB,CAC3CM,OAAQ5C,EAAMgC,MAAM1B,MAAK,SAAAkB,GAAI,OAAIA,EAAK/B,OAASA,QAE9CwD,SC1CMC,G,OA1BD,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMvC,EAAuB,EAAvBA,OAAQwC,EAAe,EAAfA,SACvBC,EAAMF,EAAKzD,KAAK4D,IAAI,OACpBC,EAAQJ,EAAKzD,KAAK4D,IAAI,SAG5B,OACE,yBACEjB,UAAWC,IAAW,kBAAmB,CACvCkB,KAAgB,SAAVD,EACNE,OAAkB,WAAVF,EACRG,MAAiB,UAAVH,KAEP,yBAAKlB,UAAU,SACb,yBAAKgB,IAAKA,EAAKM,IAAI,cACjBP,GACA,4BAAQf,UAAU,cAAcrC,MAAOuD,EAAOT,SAXnC,SAAAH,GAAC,OAAI/B,EAAOgD,aAAaT,EAAKV,IAAK,CAAE/C,KAAM,CAAE2D,MAAKE,MAAOZ,EAAEI,OAAO/C,WAY3E,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,SAAd,cCnBD6D,EAAc,SAACC,EAAOvC,GAAU,IACnC4B,EAA+BW,EAA/BX,KAAM1B,EAAyBqC,EAAzBrC,WAAYC,EAAaoC,EAAbpC,SAC1B,OAAQyB,EAAK1D,MACX,IAAK,OACH,OACE,uCAAOgC,EAAP,CAAmBsC,KAAMZ,EAAKzD,KAAK4D,IAAI,SACpC5B,GAGP,IAAK,YACH,OAAO,sBAAOD,EAAaC,GAC7B,IAAK,UACH,IAAMsC,EAAO,WAAOb,EAAKzD,KAAK4D,IAAI,UAAY,KAC9C,OAAO,kBAACU,EAAYvC,EAAaC,GAEnC,IAAK,QACH,OAAO,+BAAgBD,EAAaC,GACtC,IAAK,QACH,OAAO,kBAAC,EAAUoC,GACpB,IAAK,OACH,OACE,uBAAQrC,EACN,4BAAKC,IAGT,IAAK,YACC,OAAO,uBAAQD,EAAaC,GACpC,IAAK,aACJ,OACC,6BACE,yBAAUD,EAAaC,IAG3B,QACE,OAAOH,MCrCA0C,G,OAAS,CACpBC,SAAU,CACRC,MAAO,CACL,CACEC,MAAO,CACL,CAAE3E,KAAM,aACR,CAAEA,KAAM,SACR,CAAEA,KAAM,QACR,CAAEA,KAAM,WACR,CAAEA,KAAM,SACR,CAAEA,KAAM,QACR,CAAEA,KAAM,eAEV4E,IAAK,KAIXpE,OAAQ,CACNqE,UAAW,CACTH,MAAO,CACL,CACEC,MAAO,CAAEG,OAAQ,WAIvBC,KAAM,CACJL,MAAO,CAAC,CAAEC,MAAO,CAAEG,OAAQ,WAE7BE,QAAS,CACPN,MAAO,CAAC,CAAEC,MAAO,CAAEG,OAAQ,WAE7BG,KAAM,CACJP,MAAO,CAAC,CAAE1E,KAAM,eAElBkF,UAAW,CACTC,OAAQ,CAAC,CAAEnF,KAAM,UAEnBoF,WAAY,CAAE7C,MAAO,CAAC,KACtB8C,MAAO,CACLX,MAAO,CACL,CACEC,MAAO,CAAEG,OAAQ,WAIvBQ,MAAO,CAAEC,QAAQ,GACjBC,gBAAiB,CAAED,QAAQ,MCnBzBE,EAAa,CACjB,CACEzF,KAAM,OACNiC,SAAU,kBAAC,IAAD,OAEZ,CACEjC,KAAM,SACNiC,SAAU,kBAAC,IAAD,OAEZ,CACEjC,KAAM,YACNiC,SAAU,kBAAC,IAAD,QAIRyD,EAAc,CAClB,CACE1F,KAAM,UACNiC,SAAU,kBAAC,IAAD,OAEZ,CACEjC,KAAM,aACNiC,SAAU,kBAAC,IAAD,OAEZ,CACEjC,KAAM,OACNiC,SAAU,kBAAC,IAAD,OAEZ,CACEjC,KAAM,QACNiC,SAAU,4CAIR0D,EAAU,CACdC,aADc,SACDzE,EAAQZ,GAGnB,OAFoBA,EAAZsF,QACehF,MAAK,SAAAiF,GAAC,MAAe,SAAXA,EAAE9F,UA0DxB+F,EArDI,SAAC,GAAmC,EAAjCpC,SAAiC,EAAvBtB,UAAwB,IAAD,EAC3BG,mBAASwD,IAAMC,SAASC,IADG,mBAC9C3F,EAD8C,KACvC4F,EADuC,KAE/CC,EAAYC,iBAAO,MAyBzB,OACE,6BACE,kBAAC,EAAD,CACE9F,MAAOA,EACP4B,gBAzBkB,SAACe,EAAGlD,GAC1BkD,EAAEoD,iBACFF,EAAUG,QAAQnF,WAAWpB,GAC7BoG,EAAUG,QAAQC,SAuBdpE,iBApBmB,SAACc,EAAGlD,GAC3BkD,EAAEoD,iBACF,IAAMG,EAAeL,EAAUG,QAAQhG,MAAMC,OAAOK,MAAK,SAAAuC,GAAK,OAAIA,EAAMpD,OAASA,KACjFoG,EAAUG,QAAQ/E,UAAUiF,EAAe,YAAczG,IAkBrDsC,kBAfoB,SAACY,EAAGU,GAC5BV,EAAEoD,iBACFF,EAAUG,QAAQG,YAAY,CAC5B1G,KAAM,QACNC,KAAM,CAAE2D,SAEVwC,EAAUG,QAAQG,YAAY,CAAE1G,KAAM,eAUlCuC,MAAOkD,EACPjF,OAAQkF,IAEV,kBAAC,IAAD,CACEnF,MAAOA,EACPiE,OAAQA,EACRmC,WAAS,EACThH,SAAUA,EACViH,IAAKR,EACLT,QAASA,EACTvB,YAAaA,EACbyC,YAAY,qBACZzG,QAASA,EACTyB,WAAYA,EACZwB,SA5Ce,SAAAlC,GAAM,OAAIgF,EAAShF,EAAOZ,YC7DlCuG,EARH,kBACV,yBAAKlE,UAAU,OACX,yBAAKA,UAAU,UACb,kBAAC,EAAD,SCKYmE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASvC,MACvB,2DCZNwC,IAASC,OAAO,kBAAC,EAAD,MAAS3C,SAAS4C,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.11a95c20.chunk.js","sourcesContent":["export const commands = {\n  wrapLink(change, url) {\n    change.wrapInline({ type: 'link', data: { url } });\n  },\n  unwrapLink(change) {\n    change.unwrapInline('link');\n  },\n};\n","import SoftBreak from 'slate-soft-break';\nimport When from 'slate-when';\nimport Keymap from \"@convertkit/slate-keymap\";\nimport AutoReplace from 'slate-auto-replace';\nimport PasteLinkify from 'slate-paste-linkify';\n\nexport const plugins = [\n  When({\n    when: value => value.blocks.every(b => b.type === 'code_block'),\n    plugin: SoftBreak()\n  }),\n  When({\n    when: value => !value.blocks.some(b => b.type === 'code'),\n    plugin: SoftBreak({ shift: true })\n  }),\n  PasteLinkify({\n    type: \"link\",\n    collapseTo: \"end\",\n  }),\n  Keymap({\n    \"mod+b\": (event, editor) => editor.toggleMark(\"bold\"),\n    \"mod+i\": (event, editor) => editor.toggleMark(\"italic\"),\n    \"mod+u\": (event, editor) => editor.toggleMark(\"underline\"),\n    \"mod+l\": (event, editor) => editor.toggleMark(\"list\")\n  }),\n  AutoReplace({\n    trigger: 'space',\n    before: /^(>)$/,\n    change: change => change.setBlocks('quote'),\n  }),\n  AutoReplace({\n    trigger: 'space',\n    before: /^(-)$/,\n    change: change => change.setBlocks('li').wrapBlock('ul'),\n  }),\n  AutoReplace({\n    trigger: 'space',\n    before: /^(#{1,6})$/,\n    change: (change, event, matches) => {\n      const [hashes] = matches.before;\n      const level = hashes.length;\n      change.setBlocks({ type: 'heading', data: { level } });\n    },\n  })\n];","import React from 'react';\n\nexport const renderMark = ({ mark, attributes, children }, next) => {\n  switch (mark.type) {\n    case 'bold':\n      return <strong {...attributes}>{children}</strong>;\n    case 'italic':\n      return <i {...attributes}>{children}</i>;\n    case 'underline':\n      return <u {...attributes}>{children}</u>;\n    default:\n      return next();\n  }\n};","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport './Toolbar.scss';\nimport { ImageIcon } from 'icons';\n\ntype Props = {\n  /** String className or Array of String classNames to add to the component */\n  classList: string | Array<string>,\n  /** Children to be rendered inside the toolbar */\n  children: React$Element<any>,\n  /** Block type markdown buttons */\n  blocks: Array<{type: string, children: React$Element<any>}>,\n  /** Mark type buttons */\n  marks: Array<{type: string, children: React$Element<any>}>,\n  /** Function to be fired on mark button click */\n  handleMarkClick: Function,\n  /** Function to be fired on block button click */\n  handleBlockClick: Function,\n  /** Function to be fired on image url submit */\n  handleImageSubmit: Function,\n  /** Slate Editor Value */\n  value: any\n}\n\n\nconst Toolbar = ({ \n  handleMarkClick, \n  handleBlockClick, \n  children, \n  classList, \n  handleImageSubmit,\n  blocks, \n  marks,\n  value\n}:Props) => {\n  const [displayUrlInput, setDisplayUrlInput] = useState(false);\n  const [url, setUrl] = useState('');\n\n  return (\n    <div className={classNames(classList, 'toolbar')}>\n    {blocks.map(({ type, children: blockChildren }) => (\n      <button \n      key={type}  \n      onClick={e => handleBlockClick(e, type)}\n      className={classNames(\"tooltip-icon-button\", {\n        active: value.blocks.some(block => (block.type !== 'image' && block.type === type))\n      })}>\n        {blockChildren}\n      </button>\n    ))}\n    <div className=\"image-upload\">\n      <button \n        className={classNames(\"tooltip-icon-button\", {\n          active: displayUrlInput\n        })}\n        onClick={() => setDisplayUrlInput(!displayUrlInput)}>\n          <ImageIcon />\n      </button>\n      {displayUrlInput && (\n      <div className=\"url-input-container\">\n        <input type=\"text\" value={url} onChange={e => setUrl(e.target.value)} />\n        <button disabled={url.length === 0} onClick={(e) => handleImageSubmit(e, url)}>Add</button>\n      </div>\n      )}\n    </div>\n    {marks.map(({ type, children: markChildren }) => (\n      <button \n      key={type}  \n      onClick={e => handleMarkClick(e, type)}\n      className={classNames(\"tooltip-icon-button\", {\n        active: value.marks.some(mark => mark.type === type)\n      })}>\n        {markChildren}\n      </button>\n    ))}\n    </div>\n  );\n};\n\nexport default Toolbar;\n","import React from 'react';\nimport classNames from 'classnames';\nimport './Image.scss';\n\nconst Image = ({ node, editor, readOnly }) => {\n  const src = node.data.get('src');\n  const align = node.data.get('align');\n\n  const handleChange = e => editor.setNodeByKey(node.key, { data: { src, align: e.target.value } });\n  return (\n    <div \n      className={classNames(\"image-container\", {\n        left: align === 'left',\n        center: align === 'center',\n        right: align === 'right'\n      })}>\n        <div className=\"image\">\n          <img src={src} alt=\"inserted\" />\n          {!readOnly && (\n            <select className=\"image-align\" value={align} onChange={handleChange}>\n              <option value=\"left\">Left</option>\n              <option value=\"center\">Center</option>\n              <option value=\"right\">Right</option>\n            </select>\n          )}\n        </div>\n    </div>\n  )\n};\n\nexport default Image;","import React from 'react';\nimport { Image } from './Image';\n\nexport const renderBlock = (props, next) => {\n  const { node, attributes, children } = props;\n  switch (node.type) {\n    case 'link':\n      return (\n        <a {...attributes} href={node.data.get('url')}>\n          {children}\n        </a>\n      );\n    case 'paragraph':\n      return <p {...attributes}>{children}</p>;\n    case 'heading': {\n      const Heading = `h${node.data.get('level') || '2'}`;\n      return <Heading {...attributes}>{children}</Heading>;\n    }\n    case 'quote':\n      return <blockquote {...attributes}>{children}</blockquote>;\n    case 'image':\n      return <Image {...props} />;\n    case 'list':\n      return (\n        <ul {...attributes}>\n          <li>{children}</li>\n        </ul>\n      );\n      case 'list_item':\n            return <li {...attributes}>{children}</li>;\n    case 'code_block': \n     return (\n      <pre>\n        <code {...attributes}>{children}</code>\n      </pre>\n     );\n    default:\n      return next();\n  }\n};","export const schema = {\n  document: {\n    nodes: [\n      {\n        match: [\n          { type: 'paragraph' }, \n          { type: 'image' }, \n          { type: 'link' },\n          { type: 'heading' },\n          { type: 'quote' },\n          { type: 'list' },\n          { type: 'code_block' }\n        ],\n        min: 1\n      },\n    ],\n  },\n  blocks: {\n    paragraph: {\n      nodes: [\n        {\n          match: { object: 'text' },\n        },\n      ],\n    },\n    link: {\n      nodes: [{ match: { object: \"text\" } }],\n    },\n    heading: {\n      nodes: [{ match: { object: 'text' } }],\n    },\n    list: {\n      nodes: [{ type: 'list_item' }],\n    },\n    list_item: {\n      parent: [{ type: 'list' }],\n    },\n    code_block: { marks: [\"\"] },\n    quote: {\n      nodes: [\n        {\n          match: { object: 'text' },\n        },\n      ],\n    },\n    image: { isVoid: true },\n    horizontal_rule: { isVoid: true },\n  }\n};","import React, { useState, useRef } from 'react';\nimport { Editor } from 'slate-react';\nimport { Value } from 'slate';\nimport { \n  BoldIcon, \n  ItalicIcon, \n  UnderlineIcon, \n  CodeIcon, \n  ListIcon,\n  TitleIcon\n} from 'icons';\nimport { commands } from './commands';\nimport initialValue from './value.json';\nimport { plugins } from './plugins';\nimport { renderMark } from './renderMark';\nimport Toolbar from './Toolbar';\nimport { renderBlock } from './renderBlock';\nimport './TextEditor.scss';\nimport { schema } from './schema';\n\ntype Props = {\n  /** String className or Array of String classNames to add to the component */\n  classList: string | Array<string>,\n  /** Whether or not the editor will be readOnly */\n  readOnly: boolean\n}\n\nconst MARK_TYPES = [\n  {\n    type: 'bold',\n    children: <BoldIcon />\n  },\n  {\n    type: 'italic',\n    children: <ItalicIcon />\n  },\n  { \n    type: 'underline',\n    children: <UnderlineIcon />\n  }\n];\n\nconst BLOCK_TYPES = [\n  {\n    type: 'heading',\n    children: <TitleIcon />\n  },\n  { \n    type: 'code_block',\n    children: <CodeIcon />\n  },\n  { \n    type: 'list',\n    children: <ListIcon />\n  },\n  {\n    type: 'quote',\n    children: <strong>&ldquo;</strong>\n  }\n];\n\nconst queries = {\n  isLinkActive(editor, value) {\n    const { inlines } = value;\n    const active = inlines.some(i => i.type === 'link');\n    return active;\n  }\n};\n\nconst TextEditor = ({ readOnly, classList }: Props) => {\n  const [value, setValue] = useState(Value.fromJSON(initialValue));\n  const editorRef = useRef(null);\n\n  const handleChange = editor => setValue(editor.value); \n  \n  const handleMarkClick = (e, type) => {\n    e.preventDefault();\n    editorRef.current.toggleMark(type);\n    editorRef.current.focus();\n  };\n\n  const handleBlockClick = (e, type) => {\n    e.preventDefault();\n    const isTypeActive = editorRef.current.value.blocks.some(block => block.type === type);\n    editorRef.current.setBlocks(isTypeActive ? 'paragraph' : type);\n  };\n\n  const handleImageSubmit = (e, src) => {\n    e.preventDefault();\n    editorRef.current.insertBlock({\n      type: 'image',\n      data: { src }\n    });\n    editorRef.current.insertBlock({ type: 'paragraph' });\n  };\n\n  return (\n    <div>\n      <Toolbar\n        value={value}\n        handleMarkClick={handleMarkClick}\n        handleBlockClick={handleBlockClick}\n        handleImageSubmit={handleImageSubmit}\n        marks={MARK_TYPES} \n        blocks={BLOCK_TYPES}\n      />\n      <Editor \n        value={value}\n        schema={schema}\n        autoFocus\n        commands={commands}\n        ref={editorRef}\n        queries={queries}\n        renderBlock={renderBlock}\n        placeholder=\"Write something...\"\n        plugins={plugins}\n        renderMark={renderMark}\n        onChange={handleChange} />\n    </div>\n  );\n};\n\nexport default TextEditor;","import React from \"react\";\nimport \"./App.css\";\nimport { Editor } from './SlateEditor';\n\nconst App = () => (\n  <div className=\"App\">\n      <div className=\"editor\">\n        <Editor />\n      </div>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}