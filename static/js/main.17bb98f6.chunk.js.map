{"version":3,"sources":["DraftEditor/plugins.js","DraftEditor/Toolbar.jsx","DraftEditor/StyleControls/StyleButton.jsx","DraftEditor/StyleControls/BlockStyleControls.jsx","DraftEditor/StyleControls/InlineStyleControls.jsx","DraftEditor/Editor.jsx","App.js","serviceWorker.js","index.js"],"names":["plugins","createPrismPlugin","prism","Prism","createLinkifyPlugin","Toolbar","children","classList","className","classNames","StyleButton","active","onToggle","style","label","onMouseDown","e","preventDefault","BLOCK_TYPES","BlockStyleControls","editorState","selection","getSelection","blockType","getCurrentContent","getBlockForKey","getStartKey","getType","map","type","key","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","index","has","linkPlugin","createLinkPlugin","placeholder","LinkButton","inlineToolbarPlugin","createInlineToolbarPlugin","InlineToolbar","DraftEditor","readOnly","useState","EditorState","createEmpty","setEditorState","editorRef","useRef","toggleInlineStyle","RichUtils","useEffect","block","data","getData","merge","language","newBlock","newContentState","blockMap","getBlockMap","set","selectionAfter","push","tabIndex","onClick","current","focus","role","onKeyDown","toggleBlockType","ref","onChange","keyBindingFn","keyCode","shiftKey","getDefaultKeyBinding","blockStyleFn","handleKeyCommand","command","state","newState","insertSoftNewline","externalProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17bb98f6.chunk.js","sourcesContent":["import Prism from 'prismjs';\nimport createPrismPlugin from 'draft-js-prism-plugin';\nimport createLinkifyPlugin from 'draft-js-linkify-plugin';\nimport './prism.css';\n\nconst plugins = [\n  createPrismPlugin({\n    prism: Prism\n  }),\n  createLinkifyPlugin(),\n];\n\nexport default plugins;","import React from \"react\";\nimport classNames from \"classnames\";\nimport \"./Toolbar.scss\";\n\ntype Props = {\n  /** String className or Array of String classNames to add to the component */\n  classList: string | Array<string>,\n  /** Children to be rendered inside the toolbar */\n  children: React$Element<any>\n};\n\nconst Toolbar = ({ children, classList }: Props) => (\n  <div className={classNames(classList, \"static-toolbar\")}>{children}</div>\n);\n\nexport default Toolbar;\n","import React from 'react';\nimport classNames from 'classnames';\nimport './StyleButton.scss';\n\nconst StyleButton = ({ \n  active, \n  onToggle, \n  style,\n  label \n}) => {\n  const toggleActive = (e) => {\n    e.preventDefault();\n    onToggle(style);\n  };\n\n  return (\n    <button \n    className={classNames(\"btn btn-link style-button\", { 'btn-active': active })} \n    onMouseDown={toggleActive}>\n      {label}\n    </button>\n  );\n};\nexport default StyleButton;","import React from 'react';\nimport classNames from 'classnames';\nimport type { EditorState } from 'draft-js';\nimport { \n  FaHeading, \n  FaListOl, \n  FaListUl, \n  FaCode,\n  FaQuoteRight \n} from \"react-icons/fa\";\nimport StyleButton from './StyleButton';\n\ntype Props = {\n  /** DraftJS editor state */\n  editorState: EditorState,\n  /** Function to be called on toggle */\n  onToggle: Function, \n  /** Array or string with CSS classes */\n  classList: Array<string> | string\n}\n\nconst BLOCK_TYPES = [\n  { label: <><FaHeading /><strong><sub>1</sub></strong></>, style: 'header-one' },\n  { label: <><FaHeading /><strong><sub>2</sub></strong></>, style: 'header-two' },\n  { label: <><FaHeading /><strong><sub>3</sub></strong></>, style: 'header-three' },\n  { label: <><FaHeading /><strong><sub>4</sub></strong></>, style: 'header-four' },\n  { label: <><FaHeading /><strong><sub>5</sub></strong></>, style: 'header-five' },\n  { label: <><FaHeading /><strong><sub>6</sub></strong></>, style: 'header-six' },\n  { label: <FaQuoteRight />, style: 'blockquote' },\n  { label: <FaListUl />, style: 'unordered-list-item' },\n  { label: <FaListOl />, style: 'ordered-list-item' },\n  { label: <FaCode />, style: 'code-block' },\n];\n\nconst BlockStyleControls = ({ editorState, onToggle, classList }: Props) => {\n  const selection = editorState.getSelection();\n  const blockType = editorState\n      .getCurrentContent()\n      .getBlockForKey(selection.getStartKey())\n      .getType();\n\n  return (\n    <div className={classNames(classList)}>\n      {BLOCK_TYPES.map((type) => (\n        <StyleButton\n          key={type.style}\n          active={type.style === blockType}\n          label={type.label}\n          onToggle={onToggle}\n          style={type.style}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default BlockStyleControls;","// @flow\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport type { EditorState } from 'draft-js';\nimport {\n  FaBold,\n  FaItalic,\n  FaUnderline,\n  FaCode\n} from 'react-icons/fa';\nimport StyleButton from './StyleButton';\n\ntype Props = {\n  /** DraftJS editor state */\n  editorState: EditorState,\n  /** Function to be called on toggle */\n  onToggle: Function, \n  /** Array or string with CSS classes */\n  classList: Array<string> | string\n}\n\nconst INLINE_STYLES = [\n  { label: <FaBold />, style: 'BOLD' },\n  { label: <FaItalic />, style: 'ITALIC' },\n  { label: <FaUnderline />, style: 'UNDERLINE' },\n  { label: <FaCode />, style: 'CODE' }\n];\n\nconst InlineStyleControls = ({ editorState, onToggle, classList }: Props) => {\n  const currentStyle = editorState.getCurrentInlineStyle();\n  return (\n    <div className={classNames(classList, \"d-flex flex-nowrap\")}>\n      {INLINE_STYLES.map((type, index) => (\n        <StyleButton\n          active={currentStyle.has(type.style)}\n          key={type.style}\n          label={type.label}\n          onToggle={onToggle}\n          style={type.style}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default InlineStyleControls;","import React, { useState, useEffect, useRef } from 'react';\nimport { \n  EditorState, \n  RichUtils, \n  getDefaultKeyBinding\n} from 'draft-js';\nimport Editor from 'draft-js-plugins-editor';\nimport createInlineToolbarPlugin from 'draft-js-inline-toolbar-plugin';\nimport classNames from 'classnames';\nimport createLinkPlugin from 'draft-js-anchor-plugin';\nimport plugins from './plugins';\nimport Toolbar from './Toolbar';\nimport BlockStyleControls from './StyleControls/BlockStyleControls';\nimport InlineStyleControls from './StyleControls/InlineStyleControls';\nimport 'draft-js-inline-toolbar-plugin/lib/plugin.css';\nimport './Editor.scss';\n\ntype Props = {\n  classList: Array<string> | string,\n  readOnly: Boolean\n}\n\nconst linkPlugin = createLinkPlugin({\n  placeholder: 'Enter an URL...',\n});\nconst { LinkButton } = linkPlugin;\n\nconst inlineToolbarPlugin = createInlineToolbarPlugin();\nconst { InlineToolbar } = inlineToolbarPlugin;\n\nconst DraftEditor = ({ readOnly, classList }: Props) => {\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n  const editorRef = useRef();\n\n  const getBlockStyle = (block) => {\n    switch (block.getType()) {\n      case 'code-block': return 'language-javascript';\n      default: return null;\n    }\n  };\n\n  const toggleInlineStyle = (style) => {\n    setEditorState(RichUtils.toggleInlineStyle(editorState, style));\n  };\n\n  useEffect(() => {\n    const selection = editorState.getSelection();\n    const block = editorState\n        .getCurrentContent()\n        .getBlockForKey(selection.getStartKey());\n    if (block.getType() === \"code-block\") {\n      const data = block.getData().merge({ language: 'javascript' });\n      const newBlock = block.merge({ data });\n      const newContentState = editorState.getCurrentContent().merge({\n        blockMap: editorState\n                  .getCurrentContent()\n                  .getBlockMap()\n                  .set(selection.getStartKey(), newBlock),\n        selectionAfter: selection\n      });\n      setEditorState(EditorState.push(editorState, newContentState, \"change-block-data\"));\n    }\n  }, [editorState]);\n\n  const keyBinding = (e) => {\n    if (e.keyCode === 13 && e.shiftKey) return 'soft-break';\n    return getDefaultKeyBinding(e);\n  };\n\n  const handleKeyCommand = (command, state) => {\n    const newState = RichUtils.handleKeyCommand(state, command);\n    if (command === 'code-block') {\n      RichUtils.setEditorState(RichUtils.toggleBlockType(state, 'code-block'));\n      return 'handled';\n    }\n    if (command === 'soft-break') {\n      setEditorState(RichUtils.insertSoftNewline(editorState));\n      return 'handled';\n    }\n    if (newState) {\n      setEditorState(newState);\n      return 'handled';\n    }\n    return 'not-handled';\n  };\n\n  const toggleBlockType = (type) => setEditorState(RichUtils.toggleBlockType(editorState, type));\n\n  return (\n    <div \n      tabIndex={0} \n      className={classNames(\"editor\", classList)} \n      onClick={() => editorRef.current.focus()}\n      role=\"textbox\"\n      onKeyDown={() => {}}\n    >\n      { !readOnly && (\n        <Toolbar>\n          <BlockStyleControls \n            editorState={editorState}\n            onToggle={toggleBlockType}\n          />\n        </Toolbar>\n      )}\n      <Editor \n        editorState={editorState}\n        plugins={[...plugins, inlineToolbarPlugin, linkPlugin]}\n        ref={editorRef}\n        readOnly={readOnly}\n        onChange={setEditorState} \n        keyBindingFn={keyBinding}\n        blockStyleFn={getBlockStyle}\n        handleKeyCommand={handleKeyCommand}\n      />\n      {!readOnly && (\n        <InlineToolbar>\n          {\n            (externalProps) => (\n              <div className=\"inline-toolbar\">\n                <InlineStyleControls \n                  editorState={editorState}\n                  onToggle={toggleInlineStyle}\n                  {...externalProps}\n                />\n                <LinkButton {...externalProps} />\n              </div>\n            )\n          }\n        </InlineToolbar>\n      )}\n    </div>\n  );\n};\n\nexport default DraftEditor;","import React from \"react\";\nimport \"./App.css\";\nimport { Editor } from './DraftEditor';\nimport 'bootstrap/scss/bootstrap.scss';\n\nconst App = () => (\n  <div className=\"App\">\n      <div className=\"editor\">\n        <Editor />\n      </div>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}