{"version":3,"sources":["utils/slateUtils.js","SlateEditor/Button/MarkButton.jsx","SlateEditor/Button/BlockButton.jsx","SlateEditor/Button/LinkButton.jsx","SlateEditor/InlineToolbar.jsx","SlateEditor/Toolbar.jsx","SlateEditor/Element/Element.jsx","SlateEditor/Leaf/Leaf.jsx","SlateEditor/Editor.jsx","SlateEditor/handleKeyDown.js","actions/index.js","DraftEditor/plugins.js","DraftEditor/Toolbar.jsx","utils/regex.js","DraftEditor/decorator.js","DraftEditor/StyleControls/StyleButton.jsx","DraftEditor/StyleControls/BlockStyleControls.jsx","DraftEditor/StyleControls/InlineStyleControls.jsx","DraftEditor/Editor.jsx","reducers/editorReducer.js","middleware/socketMiddleware.js","App.js","store/index.js","serviceWorker.js","index.js"],"names":["LIST_TYPES","HOTKEYS","isBlockActive","editor","format","Editor","nodes","match","node","type","toggleBlock","isActive","isList","includes","Transforms","unwrapNodes","n","split","setNodes","block","children","wrapNodes","toggleFormat","mode","isFormatActive","Text","isText","isMarkActive","marks","toggleMark","removeMark","addMark","isLinkActive","wrapLink","url","unwrapLink","selection","isCollapsed","Range","link","text","insertNodes","collapse","edge","React","memo","useSlate","className","classNames","active","onClick","event","preventDefault","LinkButton","inputRef","useRef","useState","urlValue","setUrlValue","showURLInput","setShowURLInput","onSubmit","e","insertLink","ref","value","placeholder","onChange","target","onBlur","current","focus","InlineToolbar","useEffect","element","ReactEditor","isFocused","string","rect","window","getSelection","getRangeAt","getBoundingClientRect","style","opacity","top","pageYOffset","offsetHeight","left","pageXOffset","offsetWidth","width","removeAttribute","createPortal","document","body","Toolbar","classList","Element","attributes","href","Leaf","leaf","leafChildren","bold","code","italic","underlined","readOnly","useMemo","withHistory","withReact","createEditor","renderElement","useCallback","props","renderLeaf","editorValue","setEditorValue","autoFocus","onDOMBeforeInput","inputType","onKeyDown","ctrlKey","Object","entries","forEach","hotkey","mark","isHotkey","key","shiftKey","exec","handleKeyDown","setEditorState","editorState","dispatch","getState","currentContent","editorReducer","getCurrentContent","newContent","payload","convertToRaw","setEditorStateSuccess","plugins","createPrismPlugin","prism","Prism","HASHTAG_REGEX","linkify","linkifyIt","decorator","strategy","contentBlock","callback","links","getText","index","lastIndex","component","state","regex","matchArr","start","length","findWithRegex","StyleButton","onToggle","label","onMouseDown","BLOCK_TYPES","BlockStyleControls","blockType","getBlockForKey","getStartKey","getType","map","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","has","linkPlugin","createLinkPlugin","inlineToolbarPlugin","createInlineToolbarPlugin","DraftEditor","useSelector","useDispatch","editorRef","toggleInlineStyle","RichUtils","host","tabIndex","role","toggleBlockType","console","log","decorators","newEditorState","data","getData","merge","language","newBlock","newContentState","blockMap","getBlockMap","set","selectionAfter","EditorState","push","keyBindingFn","keyCode","getDefaultKeyBinding","blockStyleFn","handleKeyCommand","command","newState","insertSoftNewline","currentState","newBlockState","Modifier","replaceText","externalProps","initialState","createEmpty","action","createWithContent","socketMiddleware","socket","store","next","close","socketIOClient","on","convertFromRaw","JSON","parse","message","send","stringify","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","createStore","combineReducers","configureStore","App","activeClassName","to","path","SlateEditor","exact","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a6f3c779.chunk.js","sourcesContent":["import { Editor, Transforms, Range } from 'slate';\nimport isUrl from 'is-url';\n\nexport const TEXT_FORMATS = ['bold', 'italic', 'underlined', 'code'];\nconst LIST_TYPES = ['numbered-list', 'bulleted-list'];\nexport const BLOCK_FORMATS = [\n  ...LIST_TYPES,\n  'heading-one',\n  'heading-two',\n  'block-quote',\n  'code-block'\n];\n\nexport const HOTKEYS = {\n  'mod+b': 'bold',\n  'mod+i': 'italic',\n  'mod+u': 'underlined',\n  'mod+`': 'code'\n};\n\nexport const isBlockActive = (editor, format) => {\n  const [match] = Editor.nodes(editor, {\n    match: (node) => node.type === format\n  });\n\n  return !!match;\n};\n\nexport const toggleBlock = (editor, format) => {\n  const isActive = isBlockActive(editor, format);\n  const isList = LIST_TYPES.includes(format);\n\n  Transforms.unwrapNodes(editor, {\n    match: (n) => LIST_TYPES.includes(n.type),\n    split: true\n  });\n\n  Transforms.setNodes(editor, {\n    type: isActive ? 'paragraph' : isList ? 'list-item' : format\n  });\n\n  if (!isActive && isList) {\n    const block = { type: format, children: [] };\n    Transforms.wrapNodes(editor, block);\n  }\n};\n\nexport const isFormatActive = (editor, format) => {\n  const [match] = Editor.nodes(editor, {\n    match: (n) => n[format] === true,\n    mode: 'all'\n  });\n  return !!match;\n};\n\nexport const toggleFormat = (editor, format) => {\n  const isActive = isFormatActive(editor, format);\n  Transforms.setNodes(\n    editor,\n    { [format]: isActive ? null : true },\n    { match: Text.isText, split: true }\n  );\n};\n\nexport const isMarkActive = (editor, format) => {\n  const marks = Editor.marks(editor);\n  return marks ? marks[format] === true : false;\n};\n\nexport const toggleMark = (editor, format) => {\n  if (isMarkActive(editor, format)) Editor.removeMark(editor, format);\n  else Editor.addMark(editor, format, true);\n};\n\nexport const isLinkActive = (editor) => {\n  const [link] = Editor.nodes(editor, { match: (n) => n.type === 'link' });\n  return !!link;\n};\n\nexport const unwrapLink = (editor) => {\n  Transforms.unwrapNodes(editor, { match: (n) => n.type === 'link' });\n};\n\nconst wrapLink = (editor, url) => {\n  if (isLinkActive(editor)) unwrapLink(editor);\n\n  const { selection } = editor;\n  const isCollapsed = selection && Range.isCollapsed(selection);\n  const link = {\n    type: 'link',\n    url,\n    children: isCollapsed ? [{ text: url }] : []\n  };\n\n  if (isCollapsed) {\n    Transforms.insertNodes(editor, link);\n  } else {\n    Transforms.wrapNodes(editor, link, { split: true });\n    Transforms.collapse(editor, { edge: 'end' });\n  }\n};\n\nexport const insertLink = (editor, url) => {\n  if (editor.selection) wrapLink(editor, url);\n};\n\nexport const withLinks = (editor) => {\n  const { insertData, insertText, isInline } = editor;\n\n  editor.isInline = (el) => (el.type === 'link' ? true : isInline(el));\n\n  editor.insertText = (text) => {\n    if (text && isUrl(text)) wrapLink(editor, text);\n    else insertText(text);\n  };\n\n  editor.insertData = (data) => {\n    const text = data.getData('text/plain');\n    if (text && isUrl(text)) wrapLink(editor, text);\n    else insertData(data);\n  };\n\n  return editor;\n};\n","import React from \"react\";\nimport { useSlate } from \"slate-react\";\nimport classNames from \"classnames\";\nimport './Button.scss';\nimport { isMarkActive, toggleMark } from \"utils/slateUtils\";\n\ntype Props = {\n  format: 'string',\n  children: React$Element<any>\n};\n\nconst MarkButton = ({ format, children }: Props) => {\n  const editor = useSlate();\n  return (\n    <button\n      className={classNames(\"btn btn-link\", {\n        active: isMarkActive(editor, format)\n      })}\n      onClick={(event) => {\n        event.preventDefault();\n        toggleMark(editor, format);\n      }}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default React.memo(MarkButton);\n","import React from \"react\";\nimport { useSlate } from \"slate-react\";\nimport classNames from \"classnames\";\nimport './Button.scss';\nimport { isBlockActive, toggleBlock } from \"utils/slateUtils\";\n\ntype Props = {\n  format: 'string',\n  children: React$Element<any>\n};\n\nconst BlockButton = ({ format, children }: Props) => {\n  const editor = useSlate();\n  return (\n    <button\n      className={classNames(\"btn btn-link\", {\n        active: isBlockActive(editor, format)\n      })}\n      onClick={(event) => {\n        event.preventDefault();\n        toggleBlock(editor, format);\n      }}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default React.memo(BlockButton);\n","import React, { useState, useRef } from 'react';\nimport { useSlate } from 'slate-react';\nimport { isLinkActive, insertLink } from 'utils/slateUtils';\nimport classNames from 'classnames';\nimport './Button.scss';\nimport './LinkButton.scss';\n\ntype Props = {\n  children: React$Element<any>\n};\n\nconst LinkButton = ({ children }: Props) => {\n  const editor = useSlate();\n  const inputRef = useRef(null);\n  const [urlValue, setUrlValue] = useState('');\n  const [showURLInput, setShowURLInput] = useState(false);\n\n  const submitLink = (e) => {\n    e.preventDefault();\n    insertLink(editor, urlValue);\n    setShowURLInput(false);\n  };\n\n  return (\n    <div className=\"link-button\">\n      <form\n        className={classNames('input-group', { 'd-none': !showURLInput })}\n        onSubmit={submitLink}\n      >\n        <input\n          ref={inputRef}\n          type=\"text\"\n          className=\"form-control\"\n          value={urlValue}\n          placeholder=\"Ex.: www.google.com\"\n          onChange={(e) => setUrlValue(e.target.value)}\n          onBlur={(e) => setShowURLInput(false)}\n        />\n        <div className=\"input-group-append\">\n          <input\n            className=\"btn btn-outline-secondary\"\n            type=\"submit\"\n            value=\"Add\"\n          />\n        </div>\n      </form>\n      <button\n        className={classNames('btn btn-link', {\n          active: isLinkActive(editor),\n          'd-none': showURLInput\n        })}\n        onClick={() => {\n          inputRef.current.focus();\n          setShowURLInput(!showURLInput);\n        }}\n      >\n        {children}\n      </button>\n    </div>\n  );\n};\n\nexport default LinkButton;\n","import React, { useRef, useEffect } from 'react';\nimport { useSlate, ReactEditor } from 'slate-react';\nimport { Editor, Range } from 'slate';\nimport { FaBold, FaItalic, FaUnderline } from 'react-icons/fa';\nimport { createPortal } from 'react-dom';\nimport { MarkButton } from './Button';\nimport './InlineToolbar.scss';\n\nconst InlineToolbar = () => {\n  const ref = useRef();\n  const editor = useSlate();\n  const { selection } = editor;\n\n  useEffect(() => {\n    const element = ref.current;\n\n    if (!element) return undefined;\n    if (\n      !selection ||\n      !ReactEditor.isFocused(editor) ||\n      Range.isCollapsed(selection) ||\n      Editor.string(editor, selection) === ''\n    ) {\n      element.removeAttribute('style');\n      return undefined;\n    }\n    const domSelection = window.getSelection();\n    const domRange = domSelection.getRangeAt(0);\n    const rect = domRange.getBoundingClientRect();\n    element.style.opacity = 1;\n    element.style.top = `${rect.top +\n      window.pageYOffset -\n      element.offsetHeight}px`;\n    element.style.left = `${rect.left +\n      window.pageXOffset -\n      element.offsetWidth / 2 +\n      rect.width / 2}px`;\n  }, [selection, editor]);\n\n  return createPortal(\n    <div ref={ref} className=\"inline-toolbar-slate\">\n      <MarkButton format=\"bold\">\n        <FaBold />\n      </MarkButton>\n      <MarkButton format=\"italic\">\n        <FaItalic />\n      </MarkButton>\n      <MarkButton format=\"underlined\">\n        <FaUnderline />\n      </MarkButton>\n    </div>,\n    document.body\n  );\n};\n\nexport default InlineToolbar;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport \"./Toolbar.scss\";\n\ntype Props = {\n  /** String className or Array of String classNames to add to the component */\n  classList: string | Array<string>,\n  /** Children to be rendered inside the toolbar */\n  children: React$Element<any>\n};\n\nconst Toolbar = ({ children, classList }: Props) => (\n  <div className={classNames(classList, \"toolbar\")}>{children}</div>\n);\n\nexport default Toolbar;\n","import React, { Attributes } from 'react';\nimport type { Element as ElementType } from 'slate';\n\ntype Props = {\n  attributes: Attributes,\n  children: React$Element<any>,\n  element: ElementType\n};\n\nexport default function Element({ attributes, children, element }: Props) {\n  switch (element.type) {\n    case 'link':\n      return (\n        <a {...attributes} href={element.url}>\n          {children}\n        </a>\n      );\n    case 'block-quote':\n      return <blockquote {...attributes}>{children}</blockquote>;\n    case 'bulleted-list':\n      return <ul {...attributes}>{children}</ul>;\n    case 'heading-one':\n      return <h1 {...attributes}>{children}</h1>;\n    case 'heading-two':\n      return <h2 {...attributes}>{children}</h2>;\n    case 'list-item':\n      return <li {...attributes}>{children}</li>;\n    case 'numbered-list':\n      return <ol {...attributes}>{children}</ol>;\n    default:\n      return <p {...attributes}>{children}</p>;\n  }\n}\n","import React from 'react';\nimport type { Leaf as LeafType } from 'slate';\n\ntype Props = {\n  attributes: Attributes,\n  children: React$Element<any>,\n  leaf: LeafType\n};\n\nconst Leaf = ({ attributes, children, leaf }: Props) => {\n  let leafChildren = children;\n  if (leaf.bold) leafChildren = <strong>{leafChildren}</strong>;\n  if (leaf.code) leafChildren = <code>{leafChildren}</code>;\n  if (leaf.italic) leafChildren = <em>{leafChildren}</em>;\n  if (leaf.underlined) leafChildren = <u>{leafChildren}</u>;\n  return <span {...attributes}>{leafChildren}</span>;\n};\n\nexport default Leaf;\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { createEditor } from 'slate';\nimport { Slate, Editable, withReact } from 'slate-react';\nimport { toggleFormat, toggleBlock } from 'utils/slateUtils';\nimport { withHistory } from 'slate-history';\nimport './TextEditor.scss';\nimport {\n  FaHeading,\n  FaListOl,\n  FaUnderline,\n  FaBold,\n  FaItalic,\n  FaListUl,\n  FaCode,\n  FaLink,\n  FaQuoteRight\n} from 'react-icons/fa';\nimport handleKeyDown from './handleKeyDown';\nimport InlineToolbar from './InlineToolbar';\nimport Toolbar from './Toolbar';\nimport { BlockButton, MarkButton, LinkButton } from './Button';\nimport { Element } from './Element';\nimport { Leaf } from './Leaf';\n\ntype Props = {\n  /** If the Editor is readOnly */\n  readOnly: Boolean,\n  /** List of CSS classes */\n  classList: string | Array<string>\n};\n\nconst Editor = ({ readOnly, classList }: Props) => {\n  const editor = useMemo(() => withHistory(withReact(createEditor())), []);\n  const renderElement = useCallback((props) => <Element {...props} />, []);\n  const renderLeaf = useCallback((props) => <Leaf {...props} />, []);\n  const [editorValue, setEditorValue] = useState([\n    {\n      type: 'paragraph',\n      children: [{ text: '' }]\n    }\n  ]);\n\n  return (\n    <Slate\n      editor={editor}\n      value={editorValue}\n      onChange={(value) => setEditorValue(value)}\n    >\n      <InlineToolbar />\n      <Toolbar>\n        <MarkButton format=\"bold\">\n          <FaBold />\n        </MarkButton>\n        <MarkButton format=\"italic\">\n          <FaItalic />\n        </MarkButton>\n        <MarkButton format=\"underlined\">\n          <FaUnderline />\n        </MarkButton>\n        <MarkButton format=\"code\">\n          <FaCode />\n        </MarkButton>\n        <LinkButton>\n          <FaLink />\n        </LinkButton>\n        <BlockButton format=\"heading-one\">\n          <FaHeading />\n        </BlockButton>\n        <BlockButton format=\"heading-two\">\n          <FaHeading />\n          <sub>2</sub>\n        </BlockButton>\n        <BlockButton format=\"code-block\">\n          <FaCode />\n        </BlockButton>\n        <BlockButton format=\"block-quote\">\n          <FaQuoteRight />\n        </BlockButton>\n        <BlockButton format=\"numbered-list\">\n          <FaListOl />\n        </BlockButton>\n        <BlockButton format=\"bulleted-list\">\n          <FaListUl />\n        </BlockButton>\n      </Toolbar>\n      <Editable\n        placeholder=\"Well, hello there!\"\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n        autoFocus\n        onDOMBeforeInput={(event) => {\n          switch (event.inputType) {\n            case 'formatBold':\n              return toggleFormat(editor, 'bold');\n            case 'formatItalic':\n              return toggleFormat(editor, 'italic');\n            case 'formatUnderline':\n              return toggleFormat(editor, 'underline');\n            case 'formatLink':\n              return toggleBlock(editor, 'link');\n            default:\n              return null;\n          }\n        }}\n        onKeyDown={(event) => handleKeyDown(event, editor)}\n      />\n    </Slate>\n  );\n};\n\nexport default Editor;\n","import { HOTKEYS, isBlockActive, toggleMark } from 'utils/slateUtils';\nimport isHotkey from 'is-hotkey';\n\nexport default function handleKeyDown(event, editor) {\n  if (event.ctrlKey) {\n    Object.entries(HOTKEYS).forEach(([hotkey, mark]) => {\n      if (isHotkey(hotkey, event)) toggleMark(editor, mark);\n    });\n  }\n  if (event.key === 'Enter' && event.shiftKey) {\n    event.preventDefault();\n    editor.exec({\n      type: 'insert_text',\n      text: '\\n'\n    });\n  }\n  if (event.key === 'Tab' && isBlockActive(editor, 'code-block')) {\n    event.preventDefault();\n    editor.exec({\n      type: 'insert_text',\n      text: '\\t'\n    });\n  }\n}","import { convertToRaw } from 'draft-js';\n\nexport const wsConnect = (host) => ({ type: 'WS_CONNECT', host });\nexport const wsConnecting = (host) => ({ type: 'WS_CONNECTING', host });\nexport const wsConnected = (host) => ({ type: 'WS_CONNECTED', host });\nexport const wsDisconnect = (host) => ({ type: 'WS_DISCONNECT', host });\nexport const wsDisconnected = (host) => ({ type: 'WS_DISCONNECTED', host });\nexport const newMessage = (text) => ({\n  type: 'NEW_MESSAGE',\n  payload: text\n});\n\nexport const setEditorStateSuccess = (editorState) => ({\n  type: 'SET_EDITOR_STATE',\n  payload: editorState\n});\n\nexport const setEditorState = (editorState) => (dispatch, getState) => {\n  const currentContent = getState().editorReducer.getCurrentContent();\n  const newContent = editorState.getCurrentContent();\n\n  if (currentContent !== newContent) {\n    dispatch(newMessage(convertToRaw(newContent)));\n  }\n  dispatch(setEditorStateSuccess(editorState));\n};\n\nexport const setEditorText = (text) => ({\n  type: 'SET_EDITOR_TEXT',\n  payload: text\n});\n","import Prism from 'prismjs';\nimport createPrismPlugin from 'draft-js-prism-plugin';\nimport './prism.css';\n\nconst plugins = [\n  createPrismPlugin({\n    prism: Prism\n  })\n];\n\nexport default plugins;\n","import React from 'react';\nimport classNames from 'classnames';\nimport './Toolbar.scss';\n\ntype Props = {\n  /** String className or Array of String classNames to add to the component */\n  classList: string | Array<string>,\n  /** Children to be rendered inside the toolbar */\n  children: React$Element<any>\n};\n\nconst Toolbar = ({ children, classList }: Props) => (\n  <div className={classNames(classList, 'static-toolbar position-relative')}>\n    {children}\n  </div>\n);\n\nexport default Toolbar;\n","export const LINK_REGEX = /(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u00a1-\\uffff][a-z0-9\\u00a1-\\uffff_-]{0,62})?[a-z0-9\\u00a1-\\uffff]\\.)+(?:[a-z\\u00a1-\\uffff]{2,}\\.?))(?::\\d{2,5})?(?:[/?#]\\S*)?/;\nexport const HASHTAG_REGEX = /(#[A-Z0-9a-zÀ-ÖØ-öø-ÿ]+)/g;\n","import React from 'react';\nimport { HASHTAG_REGEX } from 'utils/regex';\nimport linkifyIt from 'linkify-it';\n\nconst linkify = linkifyIt();\n\nfunction findWithRegex(regex, contentBlock, callback) {\n  const text = contentBlock.getText();\n  let matchArr;\n  let start;\n  while ((matchArr = regex.exec(text)) !== null) {\n    start = matchArr.index;\n    callback(start, start + matchArr[0].length);\n  }\n}\n\nconst linkStrategy = (contentBlock: Object, callback: Function) => {\n  const links = linkify.match(contentBlock.getText());\n  if (typeof links !== 'undefined' && links !== null) {\n    links.forEach((link) => callback(link.index, link.lastIndex));\n  }\n};\n\nconst LinkComponent = ({ children }, props) => (\n  <a {...props} className=\"link\" href={children}>\n    {children}\n  </a>\n);\n\nfunction hashtagStrategy(block, callback, state) {\n  findWithRegex(HASHTAG_REGEX, block, callback);\n}\n\nconst HashtagComponent = ({ children }, props) => (\n  <span {...props} className=\"hashtag text-muted\">\n    {children}\n  </span>\n);\n\nconst decorator = [\n  {\n    strategy: linkStrategy,\n    component: LinkComponent\n  },\n  {\n    strategy: hashtagStrategy,\n    component: HashtagComponent\n  }\n];\n\nexport default decorator;\n","import React from 'react';\nimport classNames from 'classnames';\nimport './StyleButton.scss';\n\nconst StyleButton = ({ \n  active, \n  onToggle, \n  style,\n  label \n}) => {\n  const toggleActive = (e) => {\n    e.preventDefault();\n    onToggle(style);\n  };\n\n  return (\n    <button \n    className={classNames(\"btn btn-link style-button\", { 'btn-active': active })} \n    onMouseDown={toggleActive}>\n      {label}\n    </button>\n  );\n};\nexport default StyleButton;","import React from 'react';\nimport classNames from 'classnames';\nimport type { EditorState } from 'draft-js';\nimport {\n  FaHeading,\n  FaListOl,\n  FaListUl,\n  FaCode,\n  FaQuoteRight\n} from 'react-icons/fa';\nimport StyleButton from './StyleButton';\n\ntype Props = {\n  /** DraftJS editor state */\n  editorState: EditorState,\n  /** Function to be called on toggle */\n  onToggle: Function,\n  /** Array or string with CSS classes */\n  classList: Array<string> | string\n};\n\nconst BLOCK_TYPES = [\n  {\n    label: (\n      <>\n        <FaHeading />\n        <strong>\n          <sub>1</sub>\n        </strong>\n      </>\n    ),\n    style: 'header-one'\n  },\n  {\n    label: (\n      <>\n        <FaHeading />\n        <strong>\n          <sub>2</sub>\n        </strong>\n      </>\n    ),\n    style: 'header-two'\n  },\n  {\n    label: (\n      <>\n        <FaHeading />\n        <strong>\n          <sub>3</sub>\n        </strong>\n      </>\n    ),\n    style: 'header-three'\n  },\n  {\n    label: (\n      <>\n        <FaHeading />\n        <strong>\n          <sub>4</sub>\n        </strong>\n      </>\n    ),\n    style: 'header-four'\n  },\n  { label: <FaQuoteRight />, style: 'blockquote' },\n  { label: <FaListUl />, style: 'unordered-list-item' },\n  { label: <FaListOl />, style: 'ordered-list-item' },\n  { label: <FaCode />, style: 'code-block' }\n];\n\nconst BlockStyleControls = ({ editorState, onToggle, classList }: Props) => {\n  const selection = editorState.getSelection();\n  const blockType = editorState\n    .getCurrentContent()\n    .getBlockForKey(selection.getStartKey())\n    .getType();\n\n  return (\n    <div className={classNames(classList)}>\n      {BLOCK_TYPES.map((type) => (\n        <StyleButton\n          key={type.style}\n          active={type.style === blockType}\n          label={type.label}\n          onToggle={onToggle}\n          style={type.style}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default BlockStyleControls;\n","// @flow\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport type { EditorState } from 'draft-js';\nimport {\n  FaBold,\n  FaItalic,\n  FaUnderline,\n  FaCode\n} from 'react-icons/fa';\nimport StyleButton from './StyleButton';\n\ntype Props = {\n  /** DraftJS editor state */\n  editorState: EditorState,\n  /** Function to be called on toggle */\n  onToggle: Function, \n  /** Array or string with CSS classes */\n  classList: Array<string> | string\n}\n\nconst INLINE_STYLES = [\n  { label: <FaBold />, style: 'BOLD' },\n  { label: <FaItalic />, style: 'ITALIC' },\n  { label: <FaUnderline />, style: 'UNDERLINE' },\n  { label: <FaCode />, style: 'CODE' }\n];\n\nconst InlineStyleControls = ({ editorState, onToggle, classList }: Props) => {\n  const currentStyle = editorState.getCurrentInlineStyle();\n  return (\n    <div className={classNames(classList, \"d-flex flex-nowrap\")}>\n      {INLINE_STYLES.map((type, index) => (\n        <StyleButton\n          active={currentStyle.has(type.style)}\n          key={type.style}\n          label={type.label}\n          onToggle={onToggle}\n          style={type.style}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default InlineStyleControls;","import React, { useEffect, useRef } from 'react';\nimport {\n  EditorState,\n  RichUtils,\n  getDefaultKeyBinding,\n  Modifier,\n  convertToRaw\n} from 'draft-js';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { wsConnect, setEditorState } from 'actions';\nimport Editor from 'draft-js-plugins-editor';\nimport createInlineToolbarPlugin from 'draft-js-inline-toolbar-plugin';\nimport classNames from 'classnames';\nimport createLinkPlugin from 'draft-js-anchor-plugin';\nimport plugins from './plugins';\nimport Toolbar from './Toolbar';\nimport decorators from './decorator';\nimport BlockStyleControls from './StyleControls/BlockStyleControls';\nimport InlineStyleControls from './StyleControls/InlineStyleControls';\nimport 'draft-js-inline-toolbar-plugin/lib/plugin.css';\nimport './Editor.scss';\n\ntype Props = {\n  classList: Array<string> | string,\n  readOnly: Boolean\n};\n\nconst linkPlugin = createLinkPlugin({\n  placeholder: 'Enter an URL...'\n});\nconst { LinkButton } = linkPlugin;\n\nconst inlineToolbarPlugin = createInlineToolbarPlugin();\nconst { InlineToolbar } = inlineToolbarPlugin;\n\nconst DraftEditor = ({ readOnly, classList }: Props) => {\n  const editorState = useSelector((state) => state.editorReducer);\n  const dispatch = useDispatch();\n  const editorRef = useRef();\n\n  const getBlockStyle = (block) => {\n    switch (block.getType()) {\n      case 'code-block':\n        return 'language-javascript';\n      default:\n        return null;\n    }\n  };\n\n  const toggleInlineStyle = (style) => {\n    dispatch(setEditorState(RichUtils.toggleInlineStyle(editorState, style)));\n  };\n\n  useEffect(() => {\n    dispatch(wsConnect('/'));\n  }, [dispatch]);\n\n  const keyBinding = (e) => {\n    if (e.keyCode === 13 && e.shiftKey) return 'soft-break';\n    const selection = editorState.getSelection();\n    const block = editorState\n      .getCurrentContent()\n      .getBlockForKey(selection.getStartKey());\n    if (e.key === 'Tab' && block.getType() === 'code-block') return 'code-tab';\n    return getDefaultKeyBinding(e);\n  };\n\n  const handleKeyCommand = (command, state) => {\n    const newState = RichUtils.handleKeyCommand(state, command);\n    if (command === 'code-block') {\n      dispatch(setEditorState(RichUtils.toggleBlockType(state, 'code-block')));\n      return 'handled';\n    }\n    if (command === 'soft-break') {\n      dispatch(setEditorState(RichUtils.insertSoftNewline(editorState)));\n      return 'handled';\n    }\n    if (command === 'code-tab') {\n      const currentState = editorState;\n      const newBlockState = Modifier.replaceText(\n        currentState.getCurrentContent(),\n        currentState.getSelection(),\n        '\\t'\n      );\n\n      dispatch(\n        setEditorState(\n          EditorState.push(currentState, newBlockState, 'insert-characters')\n        )\n      );\n    }\n    if (newState) {\n      dispatch(setEditorState(newState));\n      return 'handled';\n    }\n    return 'not-handled';\n  };\n\n  const toggleBlockType = (type) => {\n    dispatch(setEditorState(RichUtils.toggleBlockType(editorState, type)));\n  };\n\n  const handleChange = (newEditorState) => {\n    const selection = newEditorState.getSelection();\n    const block = newEditorState\n      .getCurrentContent()\n      .getBlockForKey(selection.getStartKey());\n    if (block.getType() === 'code-block') {\n      const data = block.getData().merge({ language: 'javascript' });\n      const newBlock = block.merge({ data });\n      const newContentState = newEditorState.getCurrentContent().merge({\n        blockMap: newEditorState\n          .getCurrentContent()\n          .getBlockMap()\n          .set(selection.getStartKey(), newBlock),\n        selectionAfter: selection\n      });\n      dispatch(\n        setEditorState(\n          EditorState.push(newEditorState, newContentState, 'change-block-data')\n        )\n      );\n    } else dispatch(setEditorState(newEditorState));\n  };\n\n  return (\n    <div\n      tabIndex={0}\n      className={classNames('editor', classList)}\n      onClick={() => editorRef.current.focus()}\n      role=\"textbox\"\n      onKeyDown={() => {}}\n    >\n      {!readOnly && (\n        <Toolbar>\n          <BlockStyleControls\n            editorState={editorState}\n            onToggle={toggleBlockType}\n          />\n          <button\n            className=\"btn btn-primary\"\n            onClick={() => {\n              console.log(convertToRaw(editorState.getCurrentContent()));\n            }}\n          >\n            Convert to Raw JS\n          </button>\n        </Toolbar>\n      )}\n      <Editor\n        editorState={editorState}\n        plugins={[...plugins, inlineToolbarPlugin, linkPlugin]}\n        ref={editorRef}\n        readOnly={readOnly}\n        decorators={decorators}\n        onChange={handleChange}\n        keyBindingFn={keyBinding}\n        blockStyleFn={getBlockStyle}\n        handleKeyCommand={handleKeyCommand}\n      />\n      {!readOnly && (\n        <InlineToolbar>\n          {(externalProps) => (\n            <div className=\"inline-toolbar-draft\">\n              <InlineStyleControls\n                editorState={editorState}\n                onToggle={toggleInlineStyle}\n                {...externalProps}\n              />\n              <LinkButton {...externalProps} />\n            </div>\n          )}\n        </InlineToolbar>\n      )}\n    </div>\n  );\n};\n\nexport default DraftEditor;\n","import { EditorState } from 'draft-js';\n\nconst initialState = EditorState.createEmpty();\n\nexport const editorReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'SET_EDITOR_STATE':\n      return action.payload;\n    case 'SET_EDITOR_TEXT':\n      return EditorState.createWithContent(action.payload);\n    default:\n      return state;\n  }\n};\n\nexport default editorReducer;\n","import * as actions from 'actions';\nimport { convertFromRaw } from 'draft-js';\nimport socketIOClient from 'socket.io-client';\n\nconst socketMiddleware = () => {\n  let socket = null;\n  return (store) => (next) => (action) => {\n    switch (action.type) {\n      case 'WS_CONNECT':\n        if (socket !== null) socket.close();\n        socket = socketIOClient(action.host);\n\n        // handlers\n        socket.on('message', (data) => {\n          store.dispatch(\n            actions.setEditorText(convertFromRaw(JSON.parse(data).message))\n          );\n        });\n\n        break;\n      case 'WS_DISCONNECT':\n        if (socket !== null) socket.close();\n        socket = null;\n        console.log('WebSocket closed');\n        break;\n      case 'NEW_MESSAGE':\n        if (socket) {\n          socket.send(\n            JSON.stringify({ command: 'NEW_MESSAGE', message: action.payload })\n          );\n        }\n\n        break;\n      default:\n        return next(action);\n    }\n  };\n};\n\nexport default socketMiddleware;\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/scss/bootstrap.scss';\nimport { HashRouter, Switch, Route, Redirect, NavLink } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { Editor as SlateEditor } from 'SlateEditor';\nimport { Editor as DraftEditor } from 'DraftEditor';\nimport configureStore from './store';\n\nconst store = configureStore();\n\nconst App = () => (\n  <Provider store={store}>\n    <HashRouter>\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <div className=\"navbar-nav\">\n          <li className=\"nav-item\">\n            <NavLink className=\"nav-link\" activeClassName=\"active\" to=\"/draft\">\n              Draft\n            </NavLink>\n          </li>\n          <li className=\"nav-item\">\n            <NavLink className=\"nav-link\" activeClassName=\"active\" to=\"/slate\">\n              Slate\n            </NavLink>\n          </li>\n        </div>\n      </nav>\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/slate\" component={SlateEditor} />\n          <Route path=\"/draft\" component={DraftEditor} />\n          <Route exact path=\"/\">\n            <Redirect to=\"/draft\" />\n          </Route>\n        </Switch>\n      </div>\n    </HashRouter>\n  </Provider>\n);\n\nexport default App;\n","import { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport { editorReducer } from 'reducers/editorReducer';\nimport thunk from 'redux-thunk';\nimport socketMiddleware from 'middleware/socketMiddleware';\n\nexport default function configureStore(initialState = {}) {\n  const composeEnhancers =\n    typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\n      : compose;\n\n  const enhancer = composeEnhancers(applyMiddleware(socketMiddleware(), thunk));\n\n  return createStore(combineReducers({ editorReducer }), enhancer);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}